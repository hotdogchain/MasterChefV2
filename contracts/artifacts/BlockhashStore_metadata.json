{
	"compiler": {
		"version": "0.6.6+commit.6c089d02"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "n",
						"type": "uint256"
					}
				],
				"name": "getBlockhash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "n",
						"type": "uint256"
					}
				],
				"name": "store",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "storeEarliest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "n",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "header",
						"type": "bytes"
					}
				],
				"name": "storeVerifyHeader",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"getBlockhash(uint256)": {
					"params": {
						"n": "the number of the block whose blockhash should be returned"
					}
				},
				"store(uint256)": {
					"params": {
						"n": "the number of the block whose blockhash should be stored"
					}
				},
				"storeVerifyHeader(uint256,bytes)": {
					"params": {
						"header": "the rlp-encoded blockheader of block n+1. We verify its correctness by checking  that it hashes to a stored blockhash, and then extract parentHash to get the n-th blockhash.",
						"n": "the number of the block whose blockhash should be stored"
					}
				}
			},
			"title": "BlockhashStore"
		},
		"userdoc": {
			"methods": {
				"getBlockhash(uint256)": {
					"notice": "gets a blockhash from the store. If no hash is known, this function reverts."
				},
				"store(uint256)": {
					"notice": "stores blockhash of a given block, assuming it is available through BLOCKHASH"
				},
				"storeEarliest()": {
					"notice": "stores blockhash of the earliest block still available through BLOCKHASH."
				},
				"storeVerifyHeader(uint256,bytes)": {
					"notice": "stores blockhash after verifying blockheader of child/subsequent block"
				}
			},
			"notice": "This contract provides a way to access blockhashes older than  the 256 block limit imposed by the BLOCKHASH opcode.  You may assume that any blockhash stored by the contract is correct."
		}
	},
	"settings": {
		"compilationTarget": {
			"Users/leilei/Downloads/MasterChefV2/contracts/BlockhashStore.sol": "BlockhashStore"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Users/leilei/Downloads/MasterChefV2/contracts/BlockhashStore.sol": {
			"keccak256": "0xc3e46edc0fa3676b0f42f809ffda4d55835591ef5d3c1bc13f6a6cece8d81d4b",
			"urls": [
				"bzz-raw://d13287088f3647310482e23c6888a8cf83cb058f7d16eb919d05a969a2b8e331",
				"dweb:/ipfs/QmXg5Z8nvVop9RRUcwPCNaVAu4vPU7ZYLnXgcCjD6hdNDr"
			]
		}
	},
	"version": 1
}